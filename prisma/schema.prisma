// Quiz App Database Schema
// Based on docs/SCHEMA.md

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// QUIZ MODELS
// ============================================

model Quiz {
  id          String      @id @default(cuid())
  title       String
  description String?
  type        QuizType    @default(NORMAL)
  
  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  questions   Question[]
  attempts    QuizAttempt[]
  
  @@index([type])
  @@index([createdAt])
}

enum QuizType {
  NORMAL  // Can be taken multiple times anytime
  DAILY   // Can only be taken once per day (resets 8 AM Vietnam time)
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum AttemptSource {
  INDIVIDUAL  // Answered as standalone question
  DAILY_QUIZ  // Answered as part of daily quiz
  NORMAL_QUIZ // Answered as part of normal quiz
}

// ============================================
// QUESTION MODELS
// ============================================

model Question {
  id        String   @id @default(cuid())
  number    Int      @default(autoincrement()) // For display as "#1", "#2", etc.
  quizId    String?  // Make optional - questions can exist without quiz
  quiz      Quiz?    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  // Question content
  text      String   @db.Text
  
  // Options stored as separate fields (A, B, C, D)
  optionA   String
  optionB   String
  optionC   String
  optionD   String
  
  // Correct answer stored as 'A', 'B', 'C', or 'D'
  correctAnswer String  // Type: 'A' | 'B' | 'C' | 'D'
  
  // Optional explanation shown after submission
  explanation   String? @db.Text
  
  // Question order in the quiz (keep for backward compatibility)
  order     Int?
  
  // New fields
  difficulty    Difficulty @default(MEDIUM)
  isActive      Boolean    @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  
  // Relations
  answers           Answer[]           // Keep for quiz attempts
  tags              QuestionTag[]
  questionAttempts  QuestionAttempt[]  // New for individual attempts
  
  @@index([quizId])
  @@index([quizId, order])
  @@index([number])     // For sorting by question number
  @@index([difficulty]) // For filtering by difficulty
  @@index([isActive])   // For filtering active questions
}

// ============================================
// TAG MODELS
// ============================================

model Tag {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  questions   QuestionTag[]
  
  @@index([name])
}

model QuestionTag {
  id         String   @id @default(cuid())
  questionId String
  tagId      String
  
  // Relations
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt  DateTime @default(now())
  
  @@unique([questionId, tagId])
  @@index([questionId])
  @@index([tagId])
}

// ============================================
// INDIVIDUAL QUESTION ATTEMPT MODELS
// ============================================

model QuestionAttempt {
  id             String        @id @default(cuid())
  
  // Question reference
  questionId     String
  question       Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  // User info (from Supabase Auth)
  userId         String        // Supabase auth.users.id (UUID)
  userEmail      String        // Cached for display purposes
  
  // User's selected answer ('A', 'B', 'C', or 'D')
  selectedAnswer String        // Type: 'A' | 'B' | 'C' | 'D'
  
  // Result
  isCorrect      Boolean
  
  // Context of the attempt
  source         AttemptSource @default(INDIVIDUAL)
  
  // Timestamps
  answeredAt     DateTime      @default(now())
  
  @@index([userId])
  @@index([questionId])
  @@index([answeredAt])
  @@index([userId, questionId]) // For checking if user already answered
  @@index([source])             // For filtering by attempt source
}

// ============================================
// USER STATISTICS MODELS
// ============================================

model UserStats {
  id                    String   @id @default(cuid())
  
  // User info (from Supabase Auth)
  userId                String   @unique // Supabase auth.users.id (UUID)
  userEmail             String   // Cached for display purposes
  
  // Overall statistics
  totalQuestionsAnswered Int     @default(0)
  totalCorrectAnswers    Int     @default(0)
  
  // Difficulty-based statistics
  easyQuestionsAnswered    Int   @default(0)
  easyCorrectAnswers       Int   @default(0)
  mediumQuestionsAnswered  Int   @default(0)
  mediumCorrectAnswers     Int   @default(0)
  hardQuestionsAnswered    Int   @default(0)
  hardCorrectAnswers       Int   @default(0)
  
  // Quiz statistics
  totalQuizzesTaken      Int     @default(0)
  dailyQuizzesTaken      Int     @default(0)
  
  // Streaks
  currentStreak          Int     @default(0)
  longestStreak          Int     @default(0)
  lastAnsweredDate       DateTime?
  
  // Timestamps
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  @@index([userId])
  @@index([totalCorrectAnswers]) // For leaderboard sorting
  @@index([currentStreak])       // For streak leaderboard
}

// ============================================
// ATTEMPT & ANSWER MODELS
// ============================================

model QuizAttempt {
  id          String   @id @default(cuid())
  
  // Quiz reference
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  // User info (from Supabase Auth)
  userId      String   // Supabase auth.users.id (UUID)
  userEmail   String   // Cached for display purposes
  
  // Attempt results
  score       Int      // Number of correct answers
  totalQuestions Int   // Total questions in quiz at time of attempt
  
  // Timestamps
  completedAt DateTime @default(now())
  
  // Relations
  answers     Answer[]
  
  @@index([userId])
  @@index([quizId])
  @@index([completedAt])
  @@index([userId, quizId, completedAt]) // For daily quiz check
  @@index([score]) // For leaderboard sorting
}

model Answer {
  id         String      @id @default(cuid())
  
  // References
  attemptId  String
  attempt    QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  
  questionId String
  question   Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  // User's selected answer ('A', 'B', 'C', or 'D')
  selectedAnswer String    // Type: 'A' | 'B' | 'C' | 'D'
  
  // Result
  isCorrect  Boolean
  
  // Timestamp
  answeredAt DateTime    @default(now())
  
  @@index([attemptId])
  @@index([questionId])
}
