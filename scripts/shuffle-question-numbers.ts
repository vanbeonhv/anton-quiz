import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// Fisher-Yates shuffle algorithm
function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array]
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]
  }
  return shuffled
}

async function shuffleQuestionNumbers() {
  try {
    console.log('üîÑ B·∫Øt ƒë·∫ßu tr·ªôn l·∫°i s·ªë th·ª© t·ª± c√¢u h·ªèi...')

    // L·∫•y t·∫•t c·∫£ c√¢u h·ªèi v√† s·∫Øp x·∫øp theo number hi·ªán t·∫°i
    const questions = await prisma.question.findMany({
      select: {
        id: true,
        number: true,
        text: true
      },
      orderBy: {
        number: 'asc'
      }
    })

    if (questions.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ c√¢u h·ªèi n√†o trong database')
      return
    }

    console.log(`üìä T√¨m th·∫•y ${questions.length} c√¢u h·ªèi`)

    // T√¨m s·ªë number l·ªõn nh·∫•t
    const maxNumber = Math.max(...questions.map(q => q.number))
    console.log(`üî¢ S·ªë number l·ªõn nh·∫•t hi·ªán t·∫°i: ${maxNumber}`)

    // T·∫°o m·∫£ng s·ªë t·ª´ 1 ƒë·∫øn maxNumber
    const numbers = Array.from({ length: maxNumber }, (_, i) => i + 1)
    
    // Tr·ªôn ng·∫´u nhi√™n m·∫£ng s·ªë
    const shuffledNumbers = shuffleArray(numbers)
    console.log('üé≤ ƒê√£ tr·ªôn ng·∫´u nhi√™n c√°c s·ªë th·ª© t·ª±')

    // C·∫≠p nh·∫≠t t·ª´ng c√¢u h·ªèi v·ªõi s·ªë m·ªõi
    console.log('üíæ ƒêang c·∫≠p nh·∫≠t database...')
    
    const updates = questions.map((question, index) => {
      const newNumber = shuffledNumbers[index]
      return prisma.question.update({
        where: { id: question.id },
        data: { number: newNumber }
      })
    })

    // Th·ª±c hi·ªán t·∫•t c·∫£ updates trong m·ªôt transaction
    await prisma.$transaction(updates)

    console.log('‚úÖ Ho√†n th√†nh! ƒê√£ tr·ªôn l·∫°i s·ªë th·ª© t·ª± cho t·∫•t c·∫£ c√¢u h·ªèi')
    console.log(`üìà S·ªë number l·ªõn nh·∫•t v·∫´n l√†: ${maxNumber}`)

    // Hi·ªÉn th·ªã m·ªôt v√†i v√≠ d·ª• thay ƒë·ªïi
    const updatedQuestions = await prisma.question.findMany({
      select: {
        id: true,
        number: true,
        text: true
      },
      orderBy: {
        number: 'asc'
      },
      take: 5
    })

    console.log('\nüìã M·ªôt v√†i c√¢u h·ªèi sau khi tr·ªôn:')
    updatedQuestions.forEach(q => {
      console.log(`  ${q.number}: ${q.text.substring(0, 50)}...`)
    })

  } catch (error) {
    console.error('‚ùå L·ªói khi tr·ªôn s·ªë th·ª© t·ª± c√¢u h·ªèi:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ch·∫°y script
shuffleQuestionNumbers()